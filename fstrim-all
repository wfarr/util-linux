#!/bin/sh
#
# Call fstrim on mounted partitions to maintain write performance.
# This is only relevant for SSD drives, see
# http://wiki.ubuntuusers.de/SSD/TRIM
set -e

# needs /proc
[ -r /proc/mounts ] || exit 0

# these file systems support trimming
SUPPORTED_FS="ext3 ext4 xfs btrfs"

# arguments: <haystack> <needle>
contains() {
    [ "${1#*$2}" != "$1" ]
}

DONE=''
while read DEV MOUNT FSTYPE OPTIONS REST; do
    # only consider /dev/*
    [ "${DEV#/dev}" != "$DEV" ] || continue
    # ignore mounts with "discard", they TRIM already
    if contains "$OPTIONS" discard; then continue; fi
    # only consider supported file systems
    if ! contains "$SUPPORTED_FS" "$FSTYPE"; then continue; fi

    # did we see this already? we need to resolve symlinks
    # for/dev/disks/by-{label,uuid}, etc.
    REALDEV=`readlink -f $DEV`
    if contains "$DONE" " $REALDEV "; then continue; fi
    DONE="$DONE $REALDEV "

    #echo "device $DEV real $REALDEV mountpoint $MOUNT fstype $FSTYPE"

    # check if that device supports trim; this does not work for devmapper,
    # though, so just call fstrim on those without the extra check and ignore
    # errors; for cryptsetup and LVM you also need extra configuration options
    # to propagate discards, which the admin might have turned off
    unset SILENT_FAILURE
    if [ "${REALDEV#/dev/dm-}" != "$REALDEV" ]; then
        #echo "device $DEV is on devmapper, skipping TRIM feature check"
        SILENT_FAILURE=1
    else
        if ! contains "`hdparm -I $REALDEV`" "TRIM"; then
            #echo "device $DEV does not support trimming"
            continue
        fi
    fi

    if [ -n "$SILENT_FAILURE" ]; then
        fstrim $MOUNT 2>/dev/null || true
    else
        fstrim $MOUNT
    fi
done < /proc/mounts
